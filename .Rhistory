source('~/makeVector.R')
?<<
?<<-
??<<-
?'<<-'
teste <- function(x) {
m <<- x
}
teste(9)
m
teste(30)
m
mvr <- makeVector(c(1,2,3,4,5))
mvr
x
source('~/cachemean.R')
cachemean(mvr)
cachemean(mvr)
mvr <- makeVector(c(10,20,30,40,50))
cachemean(mvr)
cachemean(mvr)
mvr$get
mvr$get()
mvr$set()
mvr$getmean()
x <- 100
val <- function() x
val
val$c
val
val$x
val$x()
val
val$x()
xx
x
x
?matrix
mat <- matrix(c(1,2,3,11,12,13),nrow=2,ncol=3,byrow=TRUE)
mat
source('~/makeCacheMatrix.r')
makeCacheMatrix(mat)
?'matrix operations'
??'matrix operations'
??'matrix'
??'inverse'
??'inverse matrix'
??'inverse'
??matrix
mat * -1
?operators
?operator
??operators
?'%+%'
?'%%+%'
?'%%+%%'
?'%in%'
?'%on%'
?'%+%'
??operators
?'%/%'
?'%*%'
1 / mat
source('~/makeCacheMatrix.r')
mat
solve(mat)
install.package("MASS")
install.packages("MASS")
ginv(mat)
library(MASS)
ginv(mat)
mat <- matrix(c(1,2,3,3,2,1,10,11,12),nrow=3,ncol=3)
mat
solve(A)
solve(mat)
ginv(mat)
mat <- matrix(1:4,2)
mat
solve(mat)
mat <- matrix(c(1,2,10,20),2)
solve(mat)
mat <- matrix(c(1,2,11,20),2)
solve(mat)
?solve
source('~/.active-rstudio-document')
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
source('~/makeCacheMatrix.r')
source('~/cacheSolve.R')
makeCacheMatrix(mat)
inv <- makeCacheMatrix(mat)
cacheSolve(inv)
cacheSolve(inv)
mat
solve(mat)
source('~/cacheSolve.R')
mat <- matrix(1:8,4)
mat
mat <- matrix(1:8,3)
mat <- matrix(1:8,2)
mat
mat <- matrix(1:10,4)
mat <- matrix(1:12,4)
mat
mat <- matrix(1:14,4)
mat <- matrix(1:16,4)
mat
inv <- makeCacheMatrix(mat)
cacheSolve(inv)
mat <- matrix(1:32,4)
mat
mat <- matrix(1:32,6)
mat <- matrix(1:32,3)
5 * 10
mat <- matrix(1:50,5)
mat
mat <- matrix(1:100,5)
mat
mat <- matrix(1:100,10)
mat
solve(mat)
mat <- mat *5
mat
solve(mat)
mat <- mat * mat %*% mat
mat
solve(mat)
mat
ginv(mat)
?ginv
??MASS
?try
source('~/cacheSolve.R')
source('~/cacheSolve.R')
?is
?try
?break
?exit
?return
source('~/cacheSolve.R')
solve(mat)
inv <- makeCacheMatrix(mat)
cacheSolve(inv)
inv <- makeCacheMatrix(matrix(1:4,2))
cacheSolve(inv)
source('~/cacheSolve.R')
source('~/makeCacheMatrix.r')
mat <- matrix(1:4,2)
cmat <- makeCacheMatrix(mat)
cmat
cacheSolve(cmat)
mat <- matrix(1:6,3)
mat
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
?stop
source('~/cacheSolve.R')
cacheSolve(cmat)
source('~/cacheSolve.R')
cacheSolve(cmat)
mat <- matrix(rnorm(100),10)
mat
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
cacheSolve(cmat)
mat <- matrix(rnorm(100000),10)
1000 * 1000
mat <- matrix(rnorm(1000*1000),1000)
cmat <- makeCacheMatrix(mat)
cacheSolve(cmat)
cacheSolve(cmat)
library(datasets)
data(iris)
?iris
iris
iris[Species="virginica"]
iris[Species="virginica",]
iris[,Species="virginica"]
iris[Species="virginica",1]
iris[iris$Species="virginica",1]
iris[iris$Species=="virginica",1]
iris[iris$Species=="virginica",]
iris[iris$Species=="virginica",iris$Sepal.Length]
iris$Sepal.Length
iris$Sepal.Length[iris$Species="virginica"]
iris$Sepal.Length[iris$Species=="virginica"]
mean(iris$Sepal.Length[iris$Species=="virginica"])
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
?split
mtcars
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
15.10000-26.66364
ls
debug(ls)
ls()
?
?
q
q
exit
nameValue
?debug
go
1
2
2+3
debug
q
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.1
source('~/ProgrammingAssignment2/cachematrix.R')
cmat <- makeCacheMatrix(matrix(1:4,2))
cacheSolve(cmat)
cmat <- makeCacheMatrix(matrix(rnorm(100000),1000))
cacheSolve(cmat)
cmat <- makeCacheMatrix(matrix(rnorm(1000*1000),1000))
cacheSolve(cmat)
m <- cacheSolve(cmat)
m
cmat <- makeCacheMatrix(matrix(rnorm(1000*1000),1000))
m <- cacheSolve(cmat)
m
m <- cacheSolve(cmat)
m
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
set seed(13435)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]
source('~/cacheSolve.R')
features <- read.table("UCI HAR Dataset/features.txt",col.names=c("Feature.number","Feature"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt",col.names="Subject",header=FALSE)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt",col.names="Labels",check.names=FALSE)
x_test <- read.table("UCI HAR Dataset/test/x_test.txt",col.names=features[,2],check.names=FALSE)
toMatch <- c("mean\\(\\)[-]|std\\(\\)[-]")
matches <- unique(grep(toMatch,features[,2],value=TRUE))
x_test <- subset(x_test,select=matches)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt",col.names="Subject")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt",col.names="Labels",check.names=FALSE)
x_train <- read.table("UCI HAR Dataset/train/x_train.txt",col.names=features[,2],check.names=FALSE)
x_train <- subset(x_train,select=matches)
test <- cbind(subject_test,y_test,x_test)
subject_test <- NULL
y_test <- NULL
x_test <- NULL
train <- cbind(subjsect_train,y_train,x_train)
subject_train <- NULL
y_train <- NULL
x_train <- NULL
test_train <- rbind(test,train)
activities <- read.table("UCI HAR Dataset/activity_labels.txt",col.names=c("Activity","Activity.Description"))
df1 <- merge(activities,test_train,by.y="Labels",by.x="Activity",all.x=TRUE,all.y=FALSE)
toMatchMean <- c("mean\\(\\)[-]")
matchesMean <- unique(grep(toMatchMean,features[,2],value=TRUE))
df <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df1$ActivityDesc <- paste(df$Activity,df$ActivityDesc,collapse=".")
setwd("~/CourseraGettingAndCleaningData")
features <- read.table("UCI HAR Dataset/features.txt",col.names=c("Feature.number","Feature"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt",col.names="Subject",header=FALSE)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt",col.names="Labels",check.names=FALSE)
x_test <- read.table("UCI HAR Dataset/test/x_test.txt",col.names=features[,2],check.names=FALSE)
toMatch <- c("mean\\(\\)[-]|std\\(\\)[-]")
matches <- unique(grep(toMatch,features[,2],value=TRUE))
x_test <- subset(x_test,select=matches)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt",col.names="Subject")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt",col.names="Labels",check.names=FALSE)
x_train <- read.table("UCI HAR Dataset/train/x_train.txt",col.names=features[,2],check.names=FALSE)
x_train <- subset(x_train,select=matches)
test <- cbind(subject_test,y_test,x_test)
subject_test <- NULL
y_test <- NULL
x_test <- NULL
train <- cbind(subjsect_train,y_train,x_train)
subject_train <- NULL
y_train <- NULL
x_train <- NULL
test_train <- rbind(test,train)
activities <- read.table("UCI HAR Dataset/activity_labels.txt",col.names=c("Activity","Activity.Description"))
df1 <- merge(activities,test_train,by.y="Labels",by.x="Activity",all.x=TRUE,all.y=FALSE)
toMatchMean <- c("mean\\(\\)[-]")
matchesMean <- unique(grep(toMatchMean,features[,2],value=TRUE))
df <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df1$ActivityDesc <- paste(df$Activity,df$ActivityDesc,collapse=".")
train <- cbind(subject_train,y_train,x_train)
subject_train <- NULL
y_train <- NULL
x_train <- NULL
test_train <- rbind(test,train)
activities <- read.table("UCI HAR Dataset/activity_labels.txt",col.names=c("Activity","Activity.Description"))
df1 <- merge(activities,test_train,by.y="Labels",by.x="Activity",all.x=TRUE,all.y=FALSE)
toMatchMean <- c("mean\\(\\)[-]")
matchesMean <- unique(grep(toMatchMean,features[,2],value=TRUE))
df <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df1$ActivityDesc <- paste(df$Activity,df$ActivityDesc,collapse=".")
features <- read.table("UCI HAR Dataset/features.txt",col.names=c("Feature.number","Feature"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt",col.names="Subject",header=FALSE)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt",col.names="Labels",check.names=FALSE)
x_test <- read.table("UCI HAR Dataset/test/x_test.txt",col.names=features[,2],check.names=FALSE)
toMatch <- c("mean\\(\\)[-]|std\\(\\)[-]")
matches <- unique(grep(toMatch,features[,2],value=TRUE))
x_test <- subset(x_test,select=matches)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt",col.names="Subject")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt",col.names="Labels",check.names=FALSE)
x_train <- read.table("UCI HAR Dataset/train/x_train.txt",col.names=features[,2],check.names=FALSE)
x_train <- subset(x_train,select=matches)
test <- cbind(subject_test,y_test,x_test)
subject_test <- NULL
y_test <- NULL
x_test <- NULL
train <- cbind(subject_train,y_train,x_train)
subject_train <- NULL
y_train <- NULL
x_train <- NULL
test_train <- rbind(test,train)
activities <- read.table("UCI HAR Dataset/activity_labels.txt",col.names=c("Activity","Activity.Description"))
df1 <- merge(activities,test_train,by.y="Labels",by.x="Activity",all.x=TRUE,all.y=FALSE)
toMatchMean <- c("mean\\(\\)[-]")
matchesMean <- unique(grep(toMatchMean,features[,2],value=TRUE))
df <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df1$ActivityDesc <- paste(df$Activity,df$ActivityDesc,collapse=".")
test <- NULL
test_train <- NULL
train <- NULL
View(df1)
df1$ActivityDesc <- paste(df$Activity,df$Activity.Description,collapse=".")
test <- NULL
test_train <- NULL
train <- NULL
View(df1)
df <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df1$ActivityDesc <- paste(df1$Activity,df1$Activity.Description,collapse=".")
test <- NULL
test_train <- NULL
train <- NULL
df <- NULL
df2 <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df2$ActivityDesc <- paste(df2$Activity,df1$Activity.Description,collapse=".")
str(df2)
unique(df2$ActivityDesc)
?factor
df2 <- subset(df1,select=c("Activity","Activity.Description","Subject",matchesMean))
df2$ActivityDesc <- factor(paste(df2$Activity,df1$Activity.Description,collapse="."))
str(df2)
unique(df2$ActivityDesc)
View(df2)
?write.csv
write.csv(df2,"tidydata.csv")
write.csv(df2,"tidydata.txt")
library(datasets)
data(iris)
?iris
iris$Sepal.Length
mean(iris$Sepal.Length)
str(iris)
iris[iris$Species=="virginica",Sepal.Length]
iris[iris$Species=="virginica",iris$Sepal.Length]
iris[iris$Species=="virginica","Sepal.Length"]
mean(iris[iris$Species=="virginica","Sepal.Length"])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
unique(mtcars$mpg)
unique(mtcars$cyl)
str(mtcar)
str(mtcars)
?mtcars
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
